{"version":3,"sources":["Search/Search.js","Button/Button.js","App/App.js","Table/Table.js","LoadingIndicator/LoadingIndicator.js","serviceWorker.js","index.js"],"names":["Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchInput","React","createRef","current","focus","_this$props","value","onChange","onSubmit","children","react_default","a","createElement","type","ref","Component","Button","_ref","onClick","className","defaultProps","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","Table","state","sortKey","isSortReverse","onSort","bind","assertThisInitialized","setState","onDismiss","_this$state","largeColumn","width","midColumn","smallColumn","sortedList","reverseSortedList","style","Table_Sort","activeSortKey","index_es","icon","map","item","key","objectID","href","url","target","rel","title","author","num_comments","points","src_Button_Button","Sort","sortClass","classNames","button-active","LoadingIndicator","pulse","DEFAULT_QUERY","App","_isMounted","results","isLoading","searchKey","searchTerm","error","needToSearchTopStories","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","result","hits","page","prevState","oldHits","updatedHits","toConsumableArray","concat","objectSpread","defineProperty","updateSearchTopStoriesState","id","_results$searchKey","filter","event","preventDefault","_this2","_this3","arguments","length","undefined","axios","then","data","catch","_this$state2","src_Search_Search","TableWithError","ButtonWithLoading","onSearchMore","rest","objectWithoutProperties","src_LoadingIndicator_LoadingIndicator","_ref2","withError","Boolean","window","location","hostname","match","library","add","faSpinner","faSort","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea967edf.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport './main.scss'\n\nclass Search extends Component {\n  constructor(props) {\n    super(props)\n    this.searchInput = React.createRef()\n  }\n\n  componentDidMount() {\n    if (this.searchInput.current) this.searchInput.current.focus()\n  }\n\n  render() {\n    const { value, onChange, onSubmit, children } = this.props\n\n    return (\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n          ref={this.searchInput}\n        />\n        <button type=\"submit\">\n          {children}\n        </button>\n      </form>\n    )\n  }\n}\n\nSearch.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n}\n\nexport default Search","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './main.scss'\n\nconst Button = ({ onClick, className, children }) => (\n  <button\n    onClick={onClick}\n    className={className}\n    type=\"button\"\n  >\n    {children}\n  </button>\n)\n\nButton.defaultProps = {\n  className: '',\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n}\n\nexport default Button","import React, { Component } from 'react'\nimport axios from 'axios'\nimport './main.scss'\n\nimport { Search } from '../Search'\nimport { Table } from '../Table'\nimport { Button } from '../Button'\nimport { LoadingIndicator } from '../LoadingIndicator'\n\nconst DEFAULT_QUERY = 'react'\nconst DEFAULT_HPP = '50'\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1'\nconst PATH_SEARCH = '/search'\nconst PARAM_SEARCH = 'query='\nconst PARAM_PAGE = 'page='\nconst PARAM_HPP = 'hitsPerPage='\n\nconst updateSearchTopStoriesState = (hits, page) => (prevState) => {\n  const { searchKey, results } = prevState\n\n  const oldHits = results && results[searchKey]\n    ? results[searchKey].hits\n    : []\n\n  const updatedHits = [...oldHits, ...hits]\n\n  return {\n    results: {\n      ...results,\n      [searchKey]: { hits: updatedHits, page }\n    },\n    isLoading: false,\n  }\n}\n\nclass App extends Component {\n  _isMounted = false\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      results: null,\n      isLoading: false,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n    }\n\n    this.needToSearchTopStories = this.needToSearchTopStories.bind(this)\n    this.setSearchTopStories = this.setSearchTopStories.bind(this)\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this)\n    this.onSearchChange = this.onSearchChange.bind(this)\n    this.onSearchSubmit = this.onSearchSubmit.bind(this)\n    this.onDismiss = this.onDismiss.bind(this)\n  }\n\n  needToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm]\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result\n    this.setState(updateSearchTopStoriesState(hits, page))\n  }\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state\n    const { hits, page } = results[searchKey]\n\n    const isNotId = (item) => item.objectID !== id\n    const updatedHits = hits.filter(isNotId)\n    \n    this.setState({ \n      results: {\n        ...results, \n        [searchKey]: { hits: updatedHits, page }\n      }\n    })\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value})\n  }\n\n  onSearchSubmit(event) {\n    event.preventDefault()\n    const { searchTerm } = this.state\n\n    if (this.needToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm)\n      this.setState({ isLoading: true })\n    }\n\n    this.setState({ \n      searchKey: searchTerm,\n    })\n  }\n\n  onSearchMore(searchKey, page) {\n    return () => {\n      this.setState({ isLoading: true })\n\n      this.fetchSearchTopStories(searchKey, page)\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n    const { searchTerm } = this.state\n    this.setState({ \n      searchKey: searchTerm,\n      isLoading: true \n    })\n    this.fetchSearchTopStories(searchTerm)\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n\n    axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(result => this._isMounted && this.setSearchTopStories(result.data))\n      .catch(error => this._isMounted && this.setState({ error, isLoading: false }))\n  }\n\n  render() {\n    const {\n      results, isLoading, searchTerm, \n      searchKey, error\n    } = this.state\n    const page = (results && results[searchKey] && results[searchKey].page) || 0\n    const list = (results && results[searchKey] && results[searchKey].hits) || []\n    \n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n            <p>\n              Search\n            </p>\n          </Search>\n        </div>\n        <TableWithError\n          error={error} \n          list={list}\n          onDismiss={this.onDismiss}\n        />\n        <div className=\"interactions\">\n          <ButtonWithLoading\n            className=\"more-hits-btn\"\n            onClick={this.onSearchMore(searchKey, page + 1)}\n            isLoading={isLoading}\n          >\n            More\n          </ButtonWithLoading>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst withLoading = (Component) => (\n  ({ isLoading, ...rest }) => ( \n    isLoading\n    ? <LoadingIndicator />\n    : <Component {...rest} />\n  )\n)\n\nconst withError = (Component) => (\n  ({ error, ...rest }) => (\n    error\n    ? <div>\n        <p>Something went wrong :(</p>\n      </div>\n    : <Component {...rest} />\n  )\n)\n\nconst ButtonWithLoading = withLoading(Button)\nconst TableWithError = withError(Table)\n\nexport default App\n\nexport {\n  updateSearchTopStoriesState\n}","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { sortBy } from 'lodash'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport classNames from 'classnames'\nimport './main.scss'\n\nimport { Button } from '../Button'\n\nconst SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse(),\n}\n\nclass Table extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      sortKey: 'NONE',\n      isSortReverse: false,\n    }\n\n    this.onSort = this.onSort.bind(this)\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse\n    this.setState({ sortKey, isSortReverse })\n  }\n\n  render() {\n    const {\n      list,\n      onDismiss,\n    } = this.props;\n\n    const {\n      sortKey,\n      isSortReverse,\n    } = this.state\n\n    const largeColumn = {\n      width: '40%',\n    }\n    const midColumn = {\n      width: '30%',\n    }\n    const smallColumn = {\n      width: '10%',\n    }\n    \n    const sortedList = SORTS[sortKey](list)\n    const reverseSortedList = isSortReverse ? sortedList.reverse() : sortedList\n\n    return (\n      <div className=\"table\">\n        <div className=\"table-header\">\n          <span style={largeColumn}>\n            <Sort\n              sortKey={'TITLE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Title\n              <FontAwesomeIcon icon=\"sort\" className=\"sort-icon\"/>\n            </Sort>\n          </span>\n          <span style={midColumn}>\n            <Sort\n              sortKey={'AUTHOR'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Author\n              <FontAwesomeIcon icon=\"sort\" className=\"sort-icon\"/>    \n            </Sort>\n          </span>\n          <span style={smallColumn}>\n            <Sort\n              sortKey={'COMMENTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Comments\n              <FontAwesomeIcon icon=\"sort\" className=\"sort-icon\"/>    \n            </Sort>\n          </span>\n          <span style={smallColumn}>\n            <Sort\n              sortKey={'POINTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Points\n              <FontAwesomeIcon icon=\"sort\" className=\"sort-icon\"/>    \n            </Sort>\n          </span>\n          <span style={smallColumn}>\n            Archive\n          </span>\n        </div>\n        {reverseSortedList.map((item) => {\n          return (\n            <div key={item.objectID} className=\"table-row\">\n              <span style={largeColumn}><a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.title}</a></span>\n              <span style={midColumn}>{item.author}</span>\n              <span style={smallColumn}>{item.num_comments}</span>\n              <span style={smallColumn}>{item.points}</span>\n              <span style={smallColumn}>\n                <Button\n                  className=\"button-inline\"\n                  onClick={() => onDismiss(item.objectID)}\n                >\n                  Dismiss\n                </Button>\n              </span>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nTable.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      objectID: PropTypes.string.isRequired,\n      author: PropTypes.string,\n      url: PropTypes.string,\n      num_comments: PropTypes.number,\n      points: PropTypes.number\n    })\n  ).isRequired,\n  onDismiss: PropTypes.func.isRequired,\n}\n\nconst Sort = ({ sortKey, activeSortKey, onSort, children }) => {\n  const sortClass = classNames(\n    'button-inline',\n    { 'button-active': sortKey === activeSortKey }\n  )\n\n  return (\n    <Button \n      onClick={() => onSort(sortKey)}\n      className={sortClass}\n    >\n      {children}\n    </Button>\n  )\n}\n\nexport default Table","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nconst LoadingIndicator = () => (\n  <FontAwesomeIcon icon=\"spinner\" className=\"loading\" pulse/>\n)\n\nexport default LoadingIndicator","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSpinner, faSort } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faSpinner, faSort)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n  module.hot.accept()\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}