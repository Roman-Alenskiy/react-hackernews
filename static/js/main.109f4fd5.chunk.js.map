{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DEFAULT_QUERY","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_isMounted","state","results","isLoading","searchKey","searchTerm","error","needToSearchTopStories","bind","assertThisInitialized","setSearchTopStories","fetchSearchTopStories","onSearchChange","onSearchSubmit","onDismiss","result","hits","page","setState","prevState","oldHits","updatedHits","toConsumableArray","concat","objectSpread","defineProperty","updateSearchTopStoriesState","id","_this$state","_results$searchKey","filter","item","objectID","event","target","value","preventDefault","_this2","_this3","arguments","length","undefined","axios","then","data","catch","_this$state2","react_default","a","createElement","className","App_Search","onChange","onSubmit","TableWithError","ButtonWithLoading","onClick","onSearchMore","Component","Search","_this4","searchInput","React","createRef","current","focus","_this$props","children","type","ref","Table","_this5","sortKey","isSortReverse","onSort","_this$props2","_this$state3","largeColumn","width","midColumn","smallColumn","sortedList","reverseSortedList","style","App_Sort","activeSortKey","index_es","icon","map","key","href","url","rel","title","author","num_comments","points","App_Button","Sort","_ref","sortClass","classNames","button-active","Button","_ref2","defaultProps","LoadingIndicator","pulse","_ref3","rest","objectWithoutProperties","App_LoadingIndicator","_ref4","withError","Boolean","window","location","hostname","match","library","add","faSpinner","faSort","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.109f4fd5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\nimport { sortBy } from 'lodash'\nimport PropTypes from 'prop-types'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport classNames from 'classnames'\nimport './App.scss'\n\nconst DEFAULT_QUERY = 'react'\nconst DEFAULT_HPP = '50'\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1'\nconst PATH_SEARCH = '/search'\nconst PARAM_SEARCH = 'query='\nconst PARAM_PAGE = 'page='\nconst PARAM_HPP = 'hitsPerPage='\n\nconst SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse(),\n}\n\nconst updateSearchTopStoriesState = (hits, page) => (prevState) => {\n  const { searchKey, results } = prevState\n\n  const oldHits = results && results[searchKey]\n    ? results[searchKey].hits\n    : []\n\n  const updatedHits = [...oldHits, ...hits]\n\n  return {\n    results: {\n      ...results,\n      [searchKey]: { hits: updatedHits, page }\n    },\n    isLoading: false,\n  }\n}\n\nclass App extends Component {\n  _isMounted = false\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      results: null,\n      isLoading: false,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      error: null,\n    }\n\n    this.needToSearchTopStories = this.needToSearchTopStories.bind(this)\n    this.setSearchTopStories = this.setSearchTopStories.bind(this)\n    this.fetchSearchTopStories = this.fetchSearchTopStories.bind(this)\n    this.onSearchChange = this.onSearchChange.bind(this)\n    this.onSearchSubmit = this.onSearchSubmit.bind(this)\n    this.onDismiss = this.onDismiss.bind(this)\n  }\n\n  needToSearchTopStories(searchTerm) {\n    return !this.state.results[searchTerm]\n  }\n\n  setSearchTopStories(result) {\n    const { hits, page } = result\n    this.setState(updateSearchTopStoriesState(hits, page))\n  }\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state\n    const { hits, page } = results[searchKey]\n\n    const isNotId = (item) => item.objectID !== id\n    const updatedHits = hits.filter(isNotId)\n    \n    this.setState({ \n      results: {\n        ...results, \n        [searchKey]: { hits: updatedHits, page }\n      }\n    })\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value})\n  }\n\n  onSearchSubmit(event) {\n    event.preventDefault()\n    const { searchTerm } = this.state\n\n    if (this.needToSearchTopStories(searchTerm)) {\n      this.fetchSearchTopStories(searchTerm)\n      this.setState({ isLoading: true })\n    }\n\n    this.setState({ \n      searchKey: searchTerm,\n    })\n  }\n\n  onSearchMore(searchKey, page) {\n    return () => {\n      this.setState({ isLoading: true })\n\n      this.fetchSearchTopStories(searchKey, page)\n    }\n  }\n\n  componentDidMount() {\n    this._isMounted = true\n    const { searchTerm } = this.state\n    this.setState({ \n      searchKey: searchTerm,\n      isLoading: true \n    })\n    this.fetchSearchTopStories(searchTerm)\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false\n  }\n\n  fetchSearchTopStories(searchTerm, page = 0) {\n\n    axios(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(result => this._isMounted && this.setSearchTopStories(result.data))\n      .catch(error => this._isMounted && this.setState({ error, isLoading: false }))\n  }\n\n  render() {\n    const {\n      results, isLoading, searchTerm, \n      searchKey, error\n    } = this.state\n    const page = (results && results[searchKey] && results[searchKey].page) || 0\n    const list = (results && results[searchKey] && results[searchKey].hits) || []\n    \n    return (\n      <div className=\"page\">\n        <div className=\"interactions\">\n          <Search\n            value={searchTerm}\n            onChange={this.onSearchChange}\n            onSubmit={this.onSearchSubmit}\n          >\n            <p>\n              Search\n            </p>\n          </Search>\n        </div>\n        <TableWithError\n          error={error} \n          list={list}\n          onDismiss={this.onDismiss}\n        />\n        <div className=\"interactions\">\n          <ButtonWithLoading\n            className=\"more-hits-btn\"\n            onClick={this.onSearchMore(searchKey, page + 1)}\n            isLoading={isLoading}\n          >\n            More\n          </ButtonWithLoading>\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Search extends Component {\n  constructor(props) {\n    super(props)\n    this.searchInput = React.createRef()\n  }\n\n  componentDidMount() {\n    if (this.searchInput.current) this.searchInput.current.focus()\n  }\n\n  render() {\n    const { value, onChange, onSubmit, children } = this.props\n\n    return (\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={onChange}\n          ref={this.searchInput}\n        />\n        <button type=\"submit\">\n          {children}\n        </button>\n      </form>\n    )\n  }\n}\n\nSearch.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  children: PropTypes.node.isRequired,\n}\n\nclass Table extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      sortKey: 'NONE',\n      isSortReverse: false,\n    }\n\n    this.onSort = this.onSort.bind(this)\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse\n    this.setState({ sortKey, isSortReverse })\n  }\n\n  render() {\n    const {\n      list,\n      onDismiss,\n    } = this.props;\n\n    const {\n      sortKey,\n      isSortReverse,\n    } = this.state\n\n    const largeColumn = {\n      width: '40%',\n    }\n    const midColumn = {\n      width: '30%',\n    }\n    const smallColumn = {\n      width: '10%',\n    }\n    \n    const sortedList = SORTS[sortKey](list)\n    const reverseSortedList = isSortReverse ? sortedList.reverse() : sortedList\n\n    return (\n      <div className=\"table\">\n        <div className=\"table-header\">\n          <span style={largeColumn}>\n            <Sort\n              sortKey={'TITLE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Title\n              <FontAwesomeIcon icon=\"sort\" className=\"sort-icon\"/>\n            </Sort>\n          </span>\n          <span style={midColumn}>\n            <Sort\n              sortKey={'AUTHOR'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Author\n              <FontAwesomeIcon icon=\"sort\" className=\"sort-icon\"/>    \n            </Sort>\n          </span>\n          <span style={smallColumn}>\n            <Sort\n              sortKey={'COMMENTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Comments\n              <FontAwesomeIcon icon=\"sort\" className=\"sort-icon\"/>    \n            </Sort>\n          </span>\n          <span style={smallColumn}>\n            <Sort\n              sortKey={'POINTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Points\n              <FontAwesomeIcon icon=\"sort\" className=\"sort-icon\"/>    \n            </Sort>\n          </span>\n          <span style={smallColumn}>\n            Archive\n          </span>\n        </div>\n        {reverseSortedList.map((item) => {\n          return (\n            <div key={item.objectID} className=\"table-row\">\n              <span style={largeColumn}><a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">{item.title}</a></span>\n              <span style={midColumn}>{item.author}</span>\n              <span style={smallColumn}>{item.num_comments}</span>\n              <span style={smallColumn}>{item.points}</span>\n              <span style={smallColumn}>\n                <Button\n                  className=\"button-inline\"\n                  onClick={() => onDismiss(item.objectID)}\n                >\n                  Dismiss\n                </Button>\n              </span>\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n}\n\nTable.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      objectID: PropTypes.string.isRequired,\n      author: PropTypes.string,\n      url: PropTypes.string,\n      num_comments: PropTypes.number,\n      points: PropTypes.number\n    })\n  ).isRequired,\n  onDismiss: PropTypes.func.isRequired,\n}\n\nconst Sort = ({ sortKey, activeSortKey, onSort, children }) => {\n  const sortClass = classNames(\n    'button-inline',\n    { 'button-active': sortKey === activeSortKey }\n  )\n\n  return (\n    <Button \n      onClick={() => onSort(sortKey)}\n      className={sortClass}\n    >\n      {children}\n    </Button>\n  )\n}\n\nconst Button = ({ onClick, className, children }) => (\n  <button\n    onClick={onClick}\n    className={className}\n    type=\"button\"\n  >\n    {children}\n  </button>\n)\n\nButton.defaultProps = {\n  className: '',\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  className: PropTypes.string,\n  children: PropTypes.node.isRequired,\n}\n\nconst LoadingIndicator = () => (\n  <FontAwesomeIcon icon=\"spinner\" className=\"loading\" pulse/>\n)\n\nconst withLoading = (Component) => (\n  ({ isLoading, ...rest }) => ( \n    isLoading\n    ? <LoadingIndicator />\n    : <Component {...rest} />\n  )\n)\n\nconst withError = (Component) => (\n  ({ error, ...rest }) => (\n    error\n    ? <div>\n        <p>Something went wrong :(</p>\n      </div>\n    : <Component {...rest} />\n  )\n)\n\nconst ButtonWithLoading = withLoading(Button)\nconst TableWithError = withError(Table)\n\nexport default App\n\nexport {\n  Button,\n  Search,\n  Table,\n  updateSearchTopStoriesState\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faSpinner, faSort } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faSpinner, faSort)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n  module.hot.accept()\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}